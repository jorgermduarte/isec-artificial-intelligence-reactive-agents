<%- contentFor('leftContent') %>


<h3 style="text-align: center;">Experiments Variables</h3>

<div id="experiment-data-properties" style="padding:20px;">
    <div class="row">
        <div class="col-md-12" style="font-weight: bold;">
            <p>Green food %:  <span id="green-food-percentage"> </span></p>
            <p>Yellow food %: <span id="yellow-food-percentage"> </span> </p>
            <p>Trap %: <span id="trap-percentage"> </span></p>
            <p>N of shelters:  <span id="n-shelters"></span></p>
            <p>N of basic agents:  <span id="n-basic-agents"> </span></p>
            <p>N of expert agents:  <span id="n-expert-agents"> </span></p>
        </div>
      
    </div>
</div>

<script>
    const received = <%-data.experiment %>;
    let props = received["1"][0];
    props["total-experiments"] = Object.keys(received).filter ( e => !isNaN(e)).length;

    document.getElementById('green-food-percentage').innerHTML = props["green-food-percentage"];
    document.getElementById('yellow-food-percentage').innerHTML = props["yellow-food-percentage"];
    document.getElementById('trap-percentage').innerHTML = props["trap-percentage"];
    document.getElementById('n-shelters').innerHTML = props["n-shelter"];
    document.getElementById('n-basic-agents').innerHTML = props["n-basic-agent"];
    document.getElementById('n-expert-agents').innerHTML = props["n-expert-agent"];

</script>


<%-contentFor('body')%>

<h3>Experiments Visualization</h3>

<div class="row" id="graphs-area">
</div>


<script>


const displayGraphs = () => {

    Object.keys(received).forEach (  (run, index) => {

        if(index < 20){

        const newCanvas = document.createElement('canvas');
        newCanvas.id = `graph-${index}`;
        newCanvas.width = "100%";
        newCanvas.height = "100%";
        
        const newDiv = document.createElement("div");
        newDiv.className = "col-md-4";

        newDiv.appendChild(newCanvas);
        document.getElementById('graphs-area').appendChild(newDiv);



        const labels = received[run].map( e => e["[step]"])
        const basicAgents = received[run].map( e  => e["count basic-agent"]);
        const expertAgents = received[run].map( e  => e["count expert-agent"]);
        const data = {
        labels: labels,
        datasets: [{
            label: `basic agents - ${index}`,
            backgroundColor: 'rgb(251, 134, 101)',
            borderColor: 'rgb(251, 134, 101)',
            data: basicAgents,
        },{
            label: `expert agents - ${index}`,
            backgroundColor: 'blue',
            borderColor: 'blue',
            data: expertAgents,
        }]
        };

        const config = {
        type: 'line',
        data: data,
        options: {}
        };

        const myChart = new Chart(
            document.getElementById(`graph-${index}`),
            config
        );
        }

    });

}

displayGraphs();

</script>


<%-contentFor('rightContent')%>

<h3 style="text-align: center;">Result Average Graph</h3>


<div class="row" style="">


    <div class="row" id="median-graph-area">
    </div>


    <hr/>
    <% if(data.experiment_name != "base-model-default-table.csv"){ %>
    
    <p></p>
    <b>Comparison of the experiment average graph with the results of the control model:</b>
    <p></p>
    <div class="col-md-6">

        <p>Basic Agent survival rate diff:</p>
        <p>Expert Agent survival rate diff: </p>
        <hr/>
     
    </div>

    <div class="col-md-6">
        <p id="basic-agent-alive-rate-difference"> loading... </p>
        <p id="expert-agent-alive-rate-difference"> loading... </p>
        <hr/>
      
    </div>
    <% } %>

</div>



<script>
    const calculateMedian = () => {

        const finalData = {};
        let total = 0;
        Object.keys(received).forEach( run => {

            if(!isNaN(run)){
                total += 1;


                Object.keys(received[run]).forEach( runKey => {
                    if(!finalData[received[run][runKey]["[step]"]]){
                        finalData[received[run][runKey]["[step]"]] = {
                            "count basic-agent": 0,
                            "count expert-agent": 0
                        }
                    }

                    finalData[received[run][runKey]["[step]"]]["count basic-agent"] += parseInt(received[run][runKey]["count basic-agent"]);
                    finalData[received[run][runKey]["[step]"]]["count expert-agent"] += parseInt(received[run][runKey]["count expert-agent"]);
                });
            }
        });

        Object.keys(finalData).forEach(key => {
            finalData[key]["count basic-agent"] = finalData[key]["count basic-agent"] / total;
            finalData[key]["count expert-agent"] = finalData[key]["count expert-agent"] / total;
        });

        const newCanvas = document.createElement('canvas');
        newCanvas.id = `median-graph`;
        newCanvas.width = "100%";
        newCanvas.height = "100%";

        const newDiv = document.createElement("div");
        newDiv.className = "col-md-12";

        newDiv.appendChild(newCanvas);
        document.getElementById('median-graph-area').appendChild(newDiv);

        //data
        const labels = Object.keys(finalData);
        const basicAgents = Object.keys(finalData).map( e  =>  finalData[e]["count basic-agent"]);
        const expertAgents = Object.keys(finalData).map( e  =>  finalData[e]["count expert-agent"]);

        const data = {
        labels: labels,
        datasets: [{
            label: `basic agents`,
            backgroundColor: 'rgb(251, 134, 101)',
            borderColor: 'rgb(251, 134, 101)',
            data: basicAgents,
        },{
            label: `expert agents`,
            backgroundColor: 'blue',
            borderColor: 'blue',
            data: expertAgents,
        }]
        };

        const config = {
        type: 'line',
        data: data,
        options: {}
        };

        const myChart = new Chart(
            document.getElementById(`median-graph`),
            config
        );

    }

calculateMedian();

</script>

<% if(data.default_experiment != null){ %>
    <script>
        const default_experiment_received = <%-data.default_experiment %>;

        const base_model_alive_rate = {
            "total-basic-agent": 0,
            "total-expert-agent": 0,
            "iterations": 0,
            "basic-agent-per-tick": [],
            "expert-agent-per-tick": [],
            "final-basic-alive-rate": 0,
            "final-expert-alive-rate": 0
        }

        const current_model_alive_rate = {
            "total-basic-agent": 0,
            "total-expert-agent": 0,
            "iterations": 0,
            "basic-agent-per-tick": [],
            "expert-agent-per-tick": [],
            "final-basic-alive-rate": 0,
            "final-expert-alive-rate": 0
        }

        const final_data_comparison = {
            "basic-agent-alive-rate-comparison": 0,
            "expert-agent-alive-rate-comparison": 0
        }

        function displayChangesComparedToDefault(){


           Object.keys(default_experiment_received).forEach(iteration => {
            if(!isNaN(iteration)){
                base_model_alive_rate["iterations"] += 1;

                default_experiment_received[iteration].forEach( experiment => {
                    if(base_model_alive_rate["total-basic-agent"] == 0){
                        base_model_alive_rate["total-basic-agent"] += parseInt(experiment["n-basic-agent"]);
                    }
                    if(base_model_alive_rate["total-expert-agent"] == 0){
                        base_model_alive_rate["total-expert-agent"] += parseInt(experiment["n-expert-agent"]);
                    }

                    base_model_alive_rate["basic-agent-per-tick"].push(parseInt(experiment["count basic-agent"]));
                    base_model_alive_rate["expert-agent-per-tick"].push(parseInt(experiment["count expert-agent"]));
                });

                base_model_alive_rate["final-basic-alive-rate"] = base_model_alive_rate["basic-agent-per-tick"].reduce(
                    (previousValue, currentValue) => previousValue + currentValue,
                    0
                ) / 1000 / base_model_alive_rate["total-basic-agent"] / base_model_alive_rate["iterations"];

                base_model_alive_rate["final-expert-alive-rate"] = base_model_alive_rate["expert-agent-per-tick"].reduce(
                    (previousValue, currentValue) => previousValue + currentValue,
                    0
                ) / 1000 / base_model_alive_rate["total-expert-agent"] / base_model_alive_rate["iterations"];


            }
           });

           Object.keys(received).forEach(iteration => {
            if(!isNaN(iteration)){
                current_model_alive_rate["iterations"] += 1;

                received[iteration].forEach( experiment => {
                    if(current_model_alive_rate["total-basic-agent"] == 0){
                        current_model_alive_rate["total-basic-agent"] += parseInt(experiment["n-basic-agent"]);
                    }
                    if(current_model_alive_rate["total-expert-agent"] == 0){
                        current_model_alive_rate["total-expert-agent"] += parseInt(experiment["n-expert-agent"]);
                    }

                    current_model_alive_rate["basic-agent-per-tick"].push(parseInt(experiment["count basic-agent"]));
                    current_model_alive_rate["expert-agent-per-tick"].push(parseInt(experiment["count expert-agent"]));
                });

                current_model_alive_rate["final-basic-alive-rate"] = current_model_alive_rate["basic-agent-per-tick"].reduce(
                    (previousValue, currentValue) => previousValue + currentValue,
                    0
                ) / 1000 / current_model_alive_rate["total-basic-agent"] / current_model_alive_rate["iterations"];

                current_model_alive_rate["final-expert-alive-rate"] = current_model_alive_rate["expert-agent-per-tick"].reduce(
                    (previousValue, currentValue) => previousValue + currentValue,
                    0
                ) / 1000 / current_model_alive_rate["total-expert-agent"] / current_model_alive_rate["iterations"];


            }
           });

            final_data_comparison["basic-agent-alive-rate-comparison"] = current_model_alive_rate["final-basic-alive-rate"] - base_model_alive_rate["final-basic-alive-rate"];
            final_data_comparison["expert-agent-alive-rate-comparison"] = current_model_alive_rate["final-expert-alive-rate"] - base_model_alive_rate["final-expert-alive-rate"];

            console.log(base_model_alive_rate);
            console.log(current_model_alive_rate);
            console.log(final_data_comparison);

            document.getElementById("basic-agent-alive-rate-difference").innerHTML = (final_data_comparison["basic-agent-alive-rate-comparison"] * 100).toFixed(3) + "%";
            document.getElementById("expert-agent-alive-rate-difference").innerHTML = (final_data_comparison["expert-agent-alive-rate-comparison"] * 100).toFixed(3) + "%";
           
            if(final_data_comparison["basic-agent-alive-rate-comparison"] > 0){
                document.getElementById("basic-agent-alive-rate-difference").style.color = "green";
            }else{
                document.getElementById("basic-agent-alive-rate-difference").style.color = "red";
            }

            if(final_data_comparison["expert-agent-alive-rate-comparison"] > 0){
                document.getElementById("expert-agent-alive-rate-difference").style.color = "green";
            }else{
                document.getElementById("expert-agent-alive-rate-difference").style.color = "red";
            }

        }

        displayChangesComparedToDefault();
    </script>
<% } %>